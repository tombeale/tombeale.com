open (OF,">$ARGV[0].ps");
open (NF,"<$ARGV[0].txt");

print OF <<end_of_header;
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%	
%%	Generated by badges.pl (C) 1999 Tom Beale
%%	
%%	     Job: 1999 Tri-Jet Team Conference
%%  Customer: Richard Hoffmann
%%	
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

612 0 translate
90 rotate

/font {findfont exch scalefont setfont} bind def
.8 1 scale

/newpage {
	showpage
	612 0 translate
	90 rotate
	.8 1 scale
} bind def

end_of_header


# ------------------- Generate Templates
print OF "%% --------------------- Template Procedures";
&card (1,274,448);
&card (2,725,448);
&card (3,274,155);
&card (4,725,155);


print OF "%% -------------------- List-O-Names\n\n";

$count = 0;
$i = 1;

while (!eof(NF))
	{
	$t1 = <NF>;
	$t2 = <NF>;
	chop($t1);
	chop($t2);
	if (index($t1,'~')>1)
		{
		($t1a, $t1b) = split(/~/,$t1);
		print OF (" ($t2) ($t1a) ($t1b) tcard$i\n");
		}
	else
		{
		print OF ("($t1) ($t2) card$i\n");
		}
		
	$i++;
	$count++;
	if ($i > 4)
		{
		print OF ("newpage\n");
		$i = 1;
		}
	}

if (i > 1)
	{
	print OF "showpage\n";
	}
	
print "$count badges processed\n\n";



sub card
	{
	$n = $_[0];
	$x = $_[1];	
	$y = $_[2];
	$y2 = $y + 10;	
	
print OF <<end_of_card;

%% ------------------------------- Single-Line Entry
/card$n {
	28 /Helvetica-Bold font
	exch
	dup stringwidth pop
	2 div neg $x add $y moveto
	show
	16 /Helvetica-Bold font
	dup stringwidth pop
	2 div neg $x add $y 20 sub moveto
	show
	} bind def

%% ------------------------------- Single-Line Entry with Title
/tcard$n {
	28 /Helvetica-Bold font
	exch
	dup stringwidth pop
	2 div neg $x add $y2 moveto
	show
	16 /Helvetica-Bold font
	dup stringwidth pop
	2 div neg $x add $y2 20 sub moveto
	show
	16 /Helvetica-Bold font
	dup stringwidth pop
	2 div neg $x add $y2 40 sub moveto
	show
	} bind def

end_of_card
	}

close OF;
close NF;